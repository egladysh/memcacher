- stole binary protocol defintions from memcached (protocol_binary.h)
- demonize
- using murmur3 hash
- the limit are in config.h
- use stl hash table
- most of the data is moved with c++11 move semantic
- possibly need to work on a gracefull shutdown
- generic architecture for building efficient TCP servers
- uses epol
- work on the hash table performance, like think about a strategy when there
  are too many collisions, etc.
- pass max number of connections in the command line
- add thread-safe logging
- set a limit on the number of connections
- support for socket files
- configuration parameters are in config.h
- tested 30000 get requests with a few bytes values, performance is the same
  as original memcached
- better memory management
- 80000 set/get takes ~5sec for memcached, my test takes ~6.5sec
  my guess, the main difference is that memcached has a custom optimized memory
  managment... custom STL allocators could probably do even better
- by default all processing happens on the main thread, it could be a good
  idea to set it to the number of cores (option -t). for example if there are
  4 cores, set the option to -t4

//
- remove getsocketopt in main

